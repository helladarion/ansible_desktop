" Gotta be first
set nocompatible

filetype off
set encoding=utf-8
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" ----- Making Vim look good -------
"Plugin 'altercation/vim-colors-solarized'
Plugin 'morhetz/gruvbox'
"Plugin 'ajh17/Spacegray.vim'
"Plugin 'tomasr/molokai'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" ---- Utility ----
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'vim-syntastic/syntastic'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'mbbill/undotree'
"Plugin 'majutsushi/tagbar'
"Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-scripts/a.vim'
Plugin 'christoomey/vim-tmux-navigator'

" ---- Extras/Advanced plugins ----------------------------------------
" Highlight and strip trailing whitespace
Plugin 'ntpeters/vim-better-whitespace'
" Easily surround chunks of text
Plugin 'tpope/vim-surround'
" Align CSV files at commas, align Markdown tables, and more
Plugin 'godlygeek/tabular'
" Automaticall insert the closing HTML tag
Plugin 'HTML-AutoCloseTag'
" Make tmux look like vim-airline (read README for extra instructions)
Plugin 'edkolev/tmuxline.vim'
" All the other syntax plugins I use
Plugin 'ekalinin/Dockerfile.vim'
"Plugin 'digitaltoad/vim-jade'
"Plugin 'tpope/vim-liquid'
"Plugin 'cakebaker/scss-syntax.vim'
Plugin 'vim-python/python-syntax'
Plugin 'tmhedberg/SimpylFold'
Bundle 'Valloric/YouCompleteMe'
"Plugin 'neoclide/coc.vim', {'branch': 'release'}
" --- Working with Git ---
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Bundle 'takac/vim-hardtime'

Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plugin 'junegunn/fzf.vim'

" ----- Other text editing features ----
Plugin 'Raimondi/delimitMate'

call vundle#end()

filetype plugin indent on

" --- General Settings ---
set backspace=indent,eol,start
set ruler
set showcmd
set incsearch
set nohlsearch
"set hlsearch
set scrolloff=8
" --- Numbers and Relative Numbers Settings ---
set number relativenumber

augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END
" To have auto fold with indent and also manual enabled
"augroup vimrc
"    au BufReadPre * setlocal foldmethod=indent
"    au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
"augroup END

syntax on
if $TMUX == ''
    set clipboard+=unnamedplus
endif
set mouse=a

" --- Extra Settings ---
set autoread
set history=10000

"Set directory for the swap files
set directory=/tmp
" toggle invisible characters
set list
set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
set showbreak=↪

" Tab control
"set noexpandtab " tabs ftw
set expandtab " tab insert 4 spaces
"set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
"set softtabstop=4 " edit as if the tabs are 2 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
"set shiftround " round indent to a multiple of 'shiftwidth'

set clipboard=unnamed

" code folding settings
set foldmethod=manual " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
"set nofoldenable " don't fold by default
set foldlevel=0

"###############################
"# Lines to save text folding: #
"###############################
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

" Perl specifics
let perl_fold = 1
" let perl_fold_blocks = 1

" enable fold with space
" nnoremap <space> za

let base16colorspace=256  " Access colors present in 256 colorspace"
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors"

set autoindent " automatically set indent of new line
"set smartindent

" We need this for plugins like Syntastic and vim-gitgutter which put symbols
" in the sign column.
hi clear SignColumn

" ----- Plugin-Specific Settings --------------------------------------
" Enable all python highlight options
let g:python_highlight_all = 1
" See doc string for folded code
let g:SimpylFold_docstring_preview=1
" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" ----- altercation/vim-colors-solarized settings -----
" Toggle this to "light" for light colorscheme
set background=dark
"set background=light

" Uncomment the next line if your terminal is not configured for solarized
"let g:solarized_termcolors=256
"let base16colorspace=256
let g:gruvbox_termcolors=256

" ----- scrooloose/syntastic settings -----
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"
augroup mySyntastic
  au!
  au FileType tex let b:syntastic_mode = "passive"
augroup END

" Set the colorscheme
"colorscheme solarized
colorscheme gruvbox
"colorscheme spacegray

"let g:spacegray_underline_search = 1
"let g:spacegray_italicize_coments = 1


" ----- bling/vim-airline settings -----
" Always show statusbar
set laststatus=2

" Fancy arrow symbols, requires a patched font
" To install a patched font, run over to
"     https://github.com/abertsch/Menlo-for-Powerline
" download all the .ttf files, double-click on them and click "Install"
" Finally, uncomment the next line
"let g:airline_powerline_fonts = 1

" Show PASTE if in paste mode
let g:airline_detect_paste=1

" Show airline for tabs too
let g:airline#extensions#tabline#enabled = 1

" Use the solarized theme for the Airline status bar
"let g:airline_theme='solarized'
let g:airline_theme='gruvbox'

" ----- jistr/vim-nerdtree-tabs -----
" Open/close NERDTree Tabs with \t
nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
" To have NERDTree always open on startup
" let g:nerdtree_tabs_open_on_console_startup = 1

"""""""""""""""""""""""""""""""""""""
" Mappings configurationn
"""""""""""""""""""""""""""""""""""""
map <C-n> :NERDTreeToggle<CR>

"""""""""""""""""""""""""""""""""""""
" FZF Mappings configurationn
"""""""""""""""""""""""""""""""""""""
"let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
"let $FZF_DEFAULT_OPTS='--reverse'
"let g:fzf_branch_actions = {
"      \ 'rebase': {
"      \   'prompt': 'Rebase> ',
"      \   'execute': 'echo system("{git} rebase {branch}")',
"      \   'multiple': v:false,
"      \   'keymap': 'ctrl-r',
"      \   'required': ['branch'],
"      \   'confirm': v:false,
"      \ },
"      \ 'track': {
"      \   'prompt': 'Track> ',
"      \   'execute': 'echo system("{git} checkout --track {branch}")',
"      \   'multiple': v:false,
"      \   'keymap': 'ctrl-t',
"      \   'required': ['branch'],
"      \   'confirm': v:false,
"      \ },
"      \}
autocmd FileType python map <buffer> <F9> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer> <F9> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>

map <C-p> :Files<CR>
"map <C-m> :TagbarToggle<CR>

"""""""""""""""""""""""""""""""""""""
" Undo Mappings configurationn
"""""""""""""""""""""""""""""""""""""
" let mapleader = " "
nnoremap <C-]> :UndotreeToggle<CR>

" ----- xolox/vim-easytags settings -----
" Where to look for tags files
"set tags=/tmp/tags;,~/.vimtags
set tags=/tmp/tags;
" Sensible defaults
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 2
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1

" ----- majutsushi/tagbar settings -----
" Open/close tagbar with \b
"nmap <silent> <leader>b :TagbarToggle<CR>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)

" ----- airblade/vim-gitgutter settings -----
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only = 1

" ----- Raimondi/delimitMate settings -----
let delimitMate_expand_cr = 1
augroup mydelimitMate
  au!
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType tex let b:delimitMate_quotes = ""
  au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
  au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END

" air-line
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
"let g:airline_left_sep = ''
let g:airline_right_sep = '«'
"let g:airline_right_sep = ''
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
